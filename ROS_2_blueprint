// astar_planner.cpp
#include <ros/ros.h>
#include <nav_msgs/OccupancyGrid.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>
#include <queue>

class AStarPlanner {
public:
    AStarPlanner() : nh("~") {
        map_sub = nh.subscribe("/map", 1, &AStarPlanner::mapCallback, this);
        path_pub = nh.advertise<nav_msgs::Path>("/path", 1);
    }

    void mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& map) {
        // Process the map and run A* algorithm
        // Publish the path
    }

private:
    ros::NodeHandle nh;
    ros::Subscriber map_sub;
    ros::Publisher path_pub;

    void publishPath(const std::vector<geometry_msgs::PoseStamped>& path) {
        nav_msgs::Path path_msg;
        path_msg.header.stamp = ros::Time::now();
        path_msg.header.frame_id = "map";
        path_msg.poses = path;

        path_pub.publish(path_msg);
    }
};

int main(int argc, char** argv) {
    ros::init(argc, argv, "astar_planner");
    AStarPlanner planner;
    ros::spin();
    return 0;
}
